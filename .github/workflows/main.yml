# This is a basic workflow to help you get started with Actions

name: paralink-node CI

# Controls when the action will run.
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  test:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Create home mount directory
      - name: Create home mount directory
        run: mkdir ~/.paralink

      # Create appropriate .env file
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          HOME_MOUNT_DIR: ~
          DATABASE_NAME: paralink_node
          DATABASE_HOST: psql
          DATABASE_USER: paralink
          DATABASE_PASSWORD: p4r4link

      # Build integration stack
      - name: Build integration stack
        run: docker-compose -f docker-compose.yml -f docker-compose.test.yml up --build -d

      # Attach to container running tests
      - name: Execute tests
        run: docker attach $$(docker-compose ps -q paralink_node)

  pre-commit:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup Python (faster than using Python container)
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel
      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install

      - name: Run pre-commit
        run: |
          pipenv run pre-commit run --all-files
